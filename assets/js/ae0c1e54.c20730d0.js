"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[962],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),u=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},c=function(t){var e=u(t.components);return a.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(h,l(l({ref:e},c),{},{components:n})):a.createElement(h,l({ref:e},c))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7323:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"unit-tests",title:"Unit tests"},s="Unit tests",u={unversionedId:"testing_auditing/unit-tests",id:"testing_auditing/unit-tests",title:"Unit tests",description:"Comet comes with some built-in unit tests written with:",source:"@site/../comet-docs/target/mdoc/5-testing_auditing/unit-tests.md",sourceDirName:"5-testing_auditing",slug:"/testing_auditing/unit-tests",permalink:"/comet/docs/testing_auditing/unit-tests",editUrl:"https://github.com/ulitol97/comet/tree/main/packages/create-docusaurus/templates/shared/../comet-docs/target/mdoc/5-testing_auditing/unit-tests.md",tags:[],version:"current",frontMatter:{id:"unit-tests",title:"Unit tests"},sidebar:"docsSidebar",previous:{title:"Other errors",permalink:"/comet/docs/error_handling/other_errors"},next:{title:"Logging",permalink:"/comet/docs/testing_auditing/logging"}},c={},d=[{value:"Scope",id:"scope",level:2},{value:"Validation tests",id:"validation-tests",level:3},{value:"Results",id:"results",level:4},{value:"Halting",id:"halting",level:4},{value:"Timeout",id:"timeout",level:4},{value:"Extractor tests",id:"extractor-tests",level:3}],p={toc:d};function m(t){var e=t.components,n=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unit-tests"},"Unit tests"),(0,i.kt)("p",null,"Comet comes with some built-in unit tests written with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.scalatest.org/"},"scalatest"),": an extensible, widely adopted scala\ntesting framework."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/typelevel/cats-effect-testing"},"cats-effect-testing"),":\nTypelevel's compatibility layer between cats-effect and tests frameworks")),(0,i.kt)("p",null,"You may run the tests by running ",(0,i.kt)("inlineCode",{parentName:"p"},"sbt test")," or simply ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," from the SBT shell."),(0,i.kt)("h2",{id:"scope"},"Scope"),(0,i.kt)("p",null,"The provided tests broadly cover the following areas:"),(0,i.kt)("h3",{id:"validation-tests"},"Validation tests"),(0,i.kt)("p",null,"Test the working of the validators in different scenarios."),(0,i.kt)("h4",{id:"results"},"Results"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Goals:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ensure that the underlying RDF validation mechanism works when using either\nShEx or SHACL schemas.")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The testing of the validation mechanism could be considered redundant, since we should be able to trust ",(0,i.kt)("a",{parentName:"p",href:"https://www.weso.es/shaclex/"},"SHaclEX")," as a validation library. However, SHaclEX is unstable, and it's better to double-check the SHaclEX validator in our streaming context.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Modus operandi:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"RDF data is generated in all accepted formats."),(0,i.kt)("li",{parentName:"ol"},"Validation schemas are generated in all accepted engines and formats."),(0,i.kt)("li",{parentName:"ol"},"All combinations are used to perform validations, testing that the\nvalidation output is correct")))),(0,i.kt)("h4",{id:"halting"},"Halting"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Goals:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ensure that Comet's validation stream halts when configured to do so\nfor either invalid or erroring validations"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Modus operandi: "),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Well formatted and badly formatted RDF data is generated"),(0,i.kt)("li",{parentName:"ol"},"Validation schemas that won't validate the data are generated"),(0,i.kt)("li",{parentName:"ol"},"The data is validated against the schemas, checking that the correct error\nis thrown for each situation.")))),(0,i.kt)("h4",{id:"timeout"},"Timeout"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Goals:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ensure that Comet's validation stream forcibly halts according to its\nextractor timeout when no items are received after some time"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Modus operandi:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"A trivial validator is run with an unfeasible timeout"),(0,i.kt)("li",{parentName:"ol"},"Check that a timeout error is thrown when the validator is initiated")))),(0,i.kt)("h3",{id:"extractor-tests"},"Extractor tests"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Goals:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Test that the pre-configured extractors work as intended, regardless of the\nvalidation results."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Modus operandi:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Some trivial but valid RDF/Schema combinations are produced and then\nconsumed by a validator, but each time the validator will be fed through a\ndifferent extractor to make sure all extractors work the same.")))))}m.isMDXComponent=!0}}]);