"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[806],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return p}});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(r),p=o,f=m["".concat(c,".").concat(p)]||m[p]||d[p]||n;return r?a.createElement(f,i(i({ref:t},u),{},{components:r})):a.createElement(f,i({ref:t},u))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<n;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2749:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var a=r(7462),o=r(3366),n=(r(7294),r(3905)),i=["components"],l={id:"predefined_extractors",title:"Pre-defined extractors"},c="Pre-defined extractors",s={unversionedId:"extractor_model/predefined_extractors",id:"extractor_model/predefined_extractors",title:"Pre-defined extractors",description:"Comet offers some functionality out of the box, as it comes with some",source:"@site/../comet-docs/target/mdoc/3-extractor_model/predefined_extractors.md",sourceDirName:"3-extractor_model",slug:"/extractor_model/predefined_extractors",permalink:"/comet/docs/extractor_model/predefined_extractors",editUrl:"https://github.com/ulitol97/comet/tree/main/packages/create-docusaurus/templates/shared/../comet-docs/target/mdoc/3-extractor_model/predefined_extractors.md",tags:[],version:"current",frontMatter:{id:"predefined_extractors",title:"Pre-defined extractors"},sidebar:"docsSidebar",previous:{title:"Extractor model",permalink:"/comet/docs/extractor_model/extractor"},next:{title:"Custom extractors",permalink:"/comet/docs/extractor_model/custom_extractors"}},u={},d=[{value:"List extractor",id:"list-extractor",level:2},{value:"File extractor",id:"file-extractor",level:2},{value:"Additional configurations",id:"additional-configurations",level:3},{value:"Charset",id:"charset",level:4},{value:"Kafka extractor",id:"kafka-extractor",level:2},{value:"Additional configurations",id:"additional-configurations-1",level:3},{value:"Mandatory configurations",id:"mandatory-configurations",level:4},{value:"Optional configurations",id:"optional-configurations",level:4}],m={toc:d};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"pre-defined-extractors"},"Pre-defined extractors"),(0,n.kt)("p",null,"Comet offers some functionality out of the box, as it comes with some\npre-defined extractors ready to be used:"),(0,n.kt)("h2",{id:"list-extractor"},(0,n.kt)("a",{parentName:"h2",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/stream/extractors/list/ListExtractor.html"},"List extractor")),(0,n.kt)("p",null,"Extractor capable of generating a stream of RDF data from an in-memory sequence\nof items."),(0,n.kt)("h2",{id:"file-extractor"},(0,n.kt)("a",{parentName:"h2",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/stream/extractors/file/FileExtractor.html"},"File extractor")),(0,n.kt)("p",null,"Extractor capable of generating a stream of RDF data from a list of Files."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Each file is expected to contain a single piece of RDF data."),(0,n.kt)("li",{parentName:"ul"},"Uses FS2's Files API.")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Inspired by ",(0,n.kt)("a",{parentName:"p",href:"https://fs2.io/#/getstarted/example"},"https://fs2.io/#/getstarted/example"))),(0,n.kt)("h3",{id:"additional-configurations"},"Additional configurations"),(0,n.kt)("h4",{id:"charset"},"Charset"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Purpose"),": Charset used in the target files."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Default value"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"UTF-8"))),(0,n.kt)("h2",{id:"kafka-extractor"},(0,n.kt)("a",{parentName:"h2",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/stream/extractors/kafka/KafkaExtractor.html"},"Kafka extractor")),(0,n.kt)("p",null,"Extractor capable of generating a stream of RDF data from an incoming Apache\nKafka stream of items."),(0,n.kt)("h3",{id:"additional-configurations-1"},"Additional configurations"),(0,n.kt)("p",null,"Being more complex, ",(0,n.kt)("em",{parentName:"p"},"KafkaExtractors")," require\na ",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("a",{parentName:"em",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/stream/extractors/kafka/KafkaExtractorConfiguration.html"},"KafkaExtractorConfiguration")),"\nspecifying how to reach and operate the Kafka stream, specifically:"),(0,n.kt)("h4",{id:"mandatory-configurations"},"Mandatory configurations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("u",null,"topic"),": Name of the topic from which data will be received")),(0,n.kt)("h4",{id:"optional-configurations"},"Optional configurations"),(0,n.kt)("p",null,"There are plenty of additional settings, the main ones being:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"server"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Hostname or IP address of the Kafka server broadcasting data."),(0,n.kt)("li",{parentName:"ul"},"Defaults to ",(0,n.kt)("inlineCode",{parentName:"li"},"localhost"),"."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"port"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Port from which the server is broadcasting data."),(0,n.kt)("li",{parentName:"ul"},"Defaults to ",(0,n.kt)("inlineCode",{parentName:"li"},"9092"),"."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"groupId"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Group to which the underlying Kafka consumer belongs"),(0,n.kt)("li",{parentName:"ul"},"Defaults to an autogenerated group ID with the app's name and version.")))),(0,n.kt)("p",null,"Visit the complete Scaladoc for further information."))}p.isMDXComponent=!0}}]);