"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[381],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return m}});var a=r(7294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},o=Object.keys(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var c=a.createContext({}),s=function(t){var e=a.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},u=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,o=t.originalType,c=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=s(r),m=n,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return r?a.createElement(f,i(i({ref:e},u),{},{components:r})):a.createElement(f,i({ref:e},u))}));function m(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2482:function(t,e,r){r.r(e),r.d(e,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"validator",title:"Validation system"},c="Validation system",s={unversionedId:"validators/validator",id:"validators/validator",title:"Validation system",description:"Validators",source:"@site/../comet-docs/target/mdoc/2-validators/validator.md",sourceDirName:"2-validators",slug:"/validators/validator",permalink:"/comet/docs/validators/validator",editUrl:"https://github.com/ulitol97/comet/tree/main/packages/create-docusaurus/templates/shared/../comet-docs/target/mdoc/2-validators/validator.md",tags:[],version:"current",frontMatter:{id:"validator",title:"Validation system"},sidebar:"docsSidebar",previous:{title:"Getting started",permalink:"/comet/docs/getting_started/example"},next:{title:"Validator configuration",permalink:"/comet/docs/validators/validator_config"}},u={},p=[],d={toc:p};function m(t){var e=t.components,r=(0,n.Z)(t,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"validation-system"},"Validation system"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/validation/Validator.html"},"Validators"),"\nare Comet's core. A validator instance produces a stream of validation\nresults which can be further processed if necessary."),(0,o.kt)("p",null,"The following are required to create a validator instance:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/validation/configuration/ValidatorConfiguration.html"},"ValidatorConfiguration")),":\ncontains the information on how the validator must perform validations and when\nit should stop.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/stream/extractors/StreamExtractor.html"},"StreamExtractor")),":\nreference to the extractor from which the validator will get its input RDF data\nstream. This input data stream is transformed to a results stream by validating\neach incoming piece of data.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A template type:\ntype of the items expected by the extractor (see next sections)"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="Signature of the Validator class"',title:'"Signature',of:!0,the:!0,Validator:!0,'class"':!0}," class Validator[A](\n  configuration: ValidatorConfiguration,\n  private val extractor: StreamExtractor[A]\n )\n")),(0,o.kt)("p",null,"Once created, simply invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"Validator#validate")," to get the results stream."))}m.isMDXComponent=!0}}]);