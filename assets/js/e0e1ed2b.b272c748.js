"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[295],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),m=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=m(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=m(r),d=n,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return r?a.createElement(f,i(i({ref:t},s),{},{components:r})):a.createElement(f,i({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var m=2;m<o;m++)i[m]=r[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5863:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"extractor",title:"Extractor model"},c="Extractor model",m={unversionedId:"extractor_model/extractor",id:"extractor_model/extractor",title:"Extractor model",description:"At this point, it's been established how Validators are exclusively in charge of",source:"@site/../comet-docs/target/mdoc/3-extractor_model/extractor.md",sourceDirName:"3-extractor_model",slug:"/extractor_model/extractor",permalink:"/comet/docs/extractor_model/extractor",editUrl:"https://github.com/ulitol97/comet/tree/main/packages/create-docusaurus/templates/shared/../comet-docs/target/mdoc/3-extractor_model/extractor.md",tags:[],version:"current",frontMatter:{id:"extractor",title:"Extractor model"},sidebar:"docsSidebar",previous:{title:"Validation results",permalink:"/comet/docs/validators/validator_results"},next:{title:"Pre-defined extractors",permalink:"/comet/docs/extractor_model/predefined_extractors"}},s={},u=[{value:"Definition",id:"definition",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Mandatory parameters",id:"mandatory-parameters",level:3},{value:"Data format",id:"data-format",level:4},{value:"Optional parameters",id:"optional-parameters",level:3},{value:"Data inference",id:"data-inference",level:4},{value:"Concurrent items",id:"concurrent-items",level:4},{value:"Item timeout",id:"item-timeout",level:4},{value:"Generic type",id:"generic-type",level:2}],p={toc:u};function d(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"extractor-model"},"Extractor model"),(0,o.kt)("p",null,"At this point, it's been established how Validators are exclusively in charge of\nvalidating a stream of RDF data according to their configuration. However, the\ninput data that is fed to the validators must come from somewhere..."),(0,o.kt)("p",null,"Enter the ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"extractor model")),"."),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("p",null,"Comet extractors are code blocks capable of generating a stream of RDF\ndata, which is eventually shoved into a validator. From the validator's\nperspective, it does not care which extractor the data comes from or how the\nextractor got that data (e.g.: from a file, from an in-memory list, from a Kafka\nstream, etc.)."),(0,o.kt)("p",null,"Comet defines the\nabstract ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/stream/extractors/StreamExtractor.html"},"StreamExtractor")),"\nclass from which all extractors are derived."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="Signature of the StreamExtractor class"',title:'"Signature',of:!0,the:!0,StreamExtractor:!0,'class"':!0}," abstract class StreamExtractor[A](\n    val format: DataFormat,\n    val inference: InferenceEngine = defaultInferenceEngine,\n    protected val concurrentItems: Int = defaultConcurrentParsing,\n    protected val itemTimeout: Option[FiniteDuration] = defaultIncomingItemsTimeout\n  )\n  (\n    implicit private val toRdfElement: A => RDFElement\n  )\n")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Regardless of their specific behaviour, all extractors receive some\nconfiguration parameters:"),(0,o.kt)("h3",{id:"mandatory-parameters"},"Mandatory parameters"),(0,o.kt)("h4",{id:"data-format"},"Data format"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/data/DataFormat$.html"},"DataFormat")),"\nof the RDF data that will be processed by the extractor."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The extractor expects all data to share the same format.")),(0,o.kt)("h3",{id:"optional-parameters"},"Optional parameters"),(0,o.kt)("h4",{id:"data-inference"},"Data inference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": Inference of the RDF data that will be processed by the\nextractor."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Default value"),": No inference.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The extractor expects all data to share the same inference.")),(0,o.kt)("h4",{id:"concurrent-items"},"Concurrent items"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": Define the maximum number of items than the extractor can fetch\nand parse for RDF in parallel."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Default value"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"10"))),(0,o.kt)("h4",{id:"item-timeout"},"Item timeout"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Purpose"),": Optionally, the amount of time that this extractor must wait\nwithout receiving any item before halting the stream. This is specially useful\nto prevent starvation when the data comes from remote/unreliable sources."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Default value"),": No timeout.")),(0,o.kt)("h2",{id:"generic-type"},"Generic type"),(0,o.kt)("p",null,"Whilst creating an extractor, a template type ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," must be defined (or inferred\nby the compiler), where ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," is the type of the items that the extractor expects\nto receive."),(0,o.kt)("p",null,"This option is provided for maximum flexibility and customization. For instance,\nimagine that you are receiving RDF data from a remote Kafka stream. The incoming\ndata could arrive in one of two ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Encoded as Strings of RDF data: safe and easy to decode, but limited."),(0,o.kt)("li",{parentName:"ul"},"Encoded as instances of a custom class: may contain further metadata,\nutilities, etc.")),(0,o.kt)("p",null,"In order not to limit the extractors to processing RDF that is already serialized as\nStrings, you may specify the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The generic type ",(0,o.kt)("inlineCode",{parentName:"li"},"A"),"."),(0,o.kt)("li",{parentName:"ol"},"An implicit function ",(0,o.kt)("inlineCode",{parentName:"li"},"toRdfElement"),", telling Comet how to convert the\nincoming instances of ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," to Comet's own ",(0,o.kt)("em",{parentName:"li"},(0,o.kt)("a",{parentName:"em",href:"https://ulitol97.github.io/comet/scaladoc/org/ragna/comet/model/rdf/RDFElement.html"},"RDFElement"))," type.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="Signature of toRdfElement"',title:'"Signature',of:!0,'toRdfElement"':!0},"implicit private val toRdfElement: A => RDFElement\n")))}d.isMDXComponent=!0}}]);