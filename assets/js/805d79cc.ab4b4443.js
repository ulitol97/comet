"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[911],{3905:function(t,e,r){r.d(e,{Zo:function(){return m},kt:function(){return u}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var c=n.createContext({}),s=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},m=function(t){var e=s(t.components);return n.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,c=t.parentName,m=l(t,["components","mdxType","originalType","parentName"]),d=s(r),u=a,g=d["".concat(c,".").concat(u)]||d[u]||p[u]||i;return r?n.createElement(g,o(o({ref:e},m),{},{components:r})):n.createElement(g,o({ref:e},m))}));function u(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6094:function(t,e,r){r.r(e),r.d(e,{assets:function(){return m},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],l={id:"example",title:"Getting started"},c="Basic example",s={unversionedId:"getting_started/example",id:"getting_started/example",title:"Getting started",description:"The following is an example showing how to use Comet with:",source:"@site/../comet-docs/target/mdoc/1-getting_started/example.md",sourceDirName:"1-getting_started",slug:"/getting_started/example",permalink:"/comet/docs/getting_started/example",editUrl:"https://github.com/ulitol97/comet/tree/main/packages/create-docusaurus/templates/shared/../comet-docs/target/mdoc/1-getting_started/example.md",tags:[],version:"current",frontMatter:{id:"example",title:"Getting started"},sidebar:"docsSidebar",previous:{title:"Troubleshooting",permalink:"/comet/docs/installation/troubleshooting"},next:{title:"Validation system",permalink:"/comet/docs/validators/validator"}},m={},p=[],d={toc:p};function u(t){var e=t.components,r=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-example"},"Basic example"),(0,i.kt)("p",null,"The following is an example showing how to use Comet with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"List Extractor"),", containing a list of RDF strings from which to form a\nstream of RDF data."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"Validator"),", configured with a ",(0,i.kt)("em",{parentName:"li"},"Schema")," and a ",(0,i.kt)("em",{parentName:"li"},"ValidationTrigger")," to\nproduce a stream of validation results."),(0,i.kt)("li",{parentName:"ul"},"A set of code blocks evaluating the final stream items:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("u",null,"EvalMap"),": Print the items at the end of the processing pipeline"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("u",null,"Error handling"),": Define error-recovering behaviour")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala",metastring:'title="Quickstart example"',title:'"Quickstart','example"':!0},'import data.DataFormat.*\nimport exception.stream.validations.*\nimport stream.extractors.list.ListExtractor\nimport validation.Validator\nimport validation.configuration.ValidatorConfiguration\n\nimport cats.effect.*\nimport fs2.*\n\nimport scala.concurrent.duration.*\n\n/**\n * Basic showcase code:\n * 1. Create a SHaclEX schema and validation trigger to validate the data\n * 2. Create a data extractor, generating RDF data from a pre-defined list\n * 3. Create the validator, giving it:\n *  - A configuration with the Schema and Trigger it will use\n *  - The extractor from which to get its data\n *    4. Start the validation stream, processing the results\n *\n * @note We pretend to have pre-defined functions that generate RDF data, Schemas, etc.\n *       to hide the complexity of generating these\n */\nobject Main extends IOApp.Simple {\n\n  override def run(args: List[String]): IO[ExitCode] = {\n\n    for {\n      // 1. Create a SHaclEX schema and validation trigger:\n      schema <- makeSchemaShexIO() // Schema\n      trigger = makeTriggerShex() // Trigger\n\n      // 2. Create a data extractor: list extractor\n      listExtractor = ListExtractor(\n        items = makeRdfItems(), // List of items to be validated\n        format = TURTLE\n      )\n\n      // 3. Create the validator\n      // 3.1 Validator configuration\n      validatorConfiguration = ValidatorConfiguration(schema, trigger)\n      // 3.2 Validator instance\n      validator = Validator(validatorConfiguration, listExtractor)\n\n      // 4. Start the validation stream\n      app <- validator.validate // Init\n        .evalMap(IO.println) // Print each item\n        .handleErrorWith { error => // Handle each error\n          Stream.eval(\n            error match {\n              case timeoutErr: StreamTimeoutException => IO.println("timeout!")\n              case invalidErr: StreamInvalidItemException => IO.println("invalid!")\n              case erroredErr: StreamErroredItemException => IO.println("errored!")\n              case other => IO.println("other throwable!")\n            }\n          )\n        }\n        .onFinalize(IO.println("Main finalized")) // Final action, always runs\n        .compile.drain\n\n    } yield app\n  }\n}\n')))}u.isMDXComponent=!0}}]);